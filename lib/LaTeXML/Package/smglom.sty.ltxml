# -*- mode: Perl -*-
# /=====================================================================\ #
# | sTeX implementation for LaTeXML (smglom.sty)                        | #
# | http://github.com/KWARC/LaTeXML-Plugin-sTeX/                        | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2015.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <m.kohlhase@jacobs-university.de>          #_#     | #
# | http://github.com/KWARC/sTeX                               (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

# =======================================================
# -2. Options Handling:                                 #
# =======================================================

DeclareOption(undef,sub {PassOptions('statements','sty',ToString(Digest(T_CS('\CurrentOption'))));
      PassOptions('structview','sty',ToString(Digest(T_CS('\CurrentOption'))));
      PassOptions('smultiling','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();

# =======================================================
# -1. Requirements:                                     #
# =======================================================

RequirePackage('statements');
RequirePackage('smultiling',options => ['langfiles']);
RequirePackage('structview');

# =======================================================
# 1. SMGloM Convenience:                                #
# =======================================================

DefMacro('\gimport',' \@ifstar\@gimport@star\@gimport@nostar');
DefMacro('\@gimport@star[] Semiverbatim','\g@import[conservative=true,ext=tex,path=#2]{#1}{#2}');
DefMacro('\@gimport@nostar[] Semiverbatim','\g@import[conservative=false,ext=tex,path=#2]{#1}{#2}');
DefConstructor('\g@import OptionalKeyVals:importmhmodule Semiverbatim Semiverbatim',
       "<omdoc:imports "
       . "from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()###2'  "
       . "conservative='&GetKeyVal(#1,'conservative')'/>",
  afterDigest => \&gimportI);
 sub gimportI {
  my ($stomach,$whatsit) = @_;
  my $keyval = $whatsit->getArg(1);
  my $repos = ToString($whatsit->getArg(2));
  my $name = $whatsit->getArg(3);
  my $containing_module = LookupValue('current_module');
  AssignValue(to_module => $containing_module);
  AssignValue(from_module => $name);
  if ($repos) {
    $keyval->setValue('repos',$repos); }
  else {
    $keyval->setValue('repos',LookupValue('current_repos')); }
  # Mystery: Why does $whatsit->setArgs($keyval,$name) raise a warning for
  #          "odd numbers" in hash assignment? Workaround for now!
  $$whatsit{args}[1] = $name; # Intention: $whatsit->setArg(2,$name);
  undef $$whatsit{args}[2]; # Intention: $whatsit->deleteArg(3);
  importMHmoduleI($stomach,$whatsit);
  return; }

DefMacro('\guse[] Semiverbatim','\g@use[ext=tex,path=#2]{#1}{#2}');
DefConstructor('\g@use OptionalKeyVals:importmhmodule Semiverbatim Semiverbatim',
  "<omdoc:uses "
  .  "from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()###2'/>",
	       afterDigest => \&gimportI);

DefMacro('\gstructure [] Semiverbatim Semiverbatim',
         '\endgroup\gstructureI[path=#3,ext=tex]{#1}{#3}\begin{structurenv}[#1]{#2}{#3}');
DefMacroI('\end{gstructure}',undef,'\end{structurenv}');
DefConstructor('\gstructureI OptionalKeyVals:importmhmodule Semiverbatim Semiverbatim', '',
   afterDigest=> \&gimportI );


RawTeX('
\newenvironment{gviewsig}[4][]{%
  \def\test{#1}%
  \ifx\@test\@empty%
    \begin{mhviewsig}[frompath=#3,topath=#4]{#2}{#3}{#4}%
  \else%
    \begin{mhviewsig}[frompath=#3,topath=#4,#1]{#2}{#3}{#4}%
  \fi%
}{%
  \end{mhviewsig}%
}%

\newenvironment{gviewnl}[5][]{%
  \def\@test{#1}\ifx\@test\@empty%
    \begin{mhviewnl}[frompath=#4,topath=#5]{#2}{#3}{#4}{#5}%
  \else%
    \begin{mhviewnl}[frompath=#4,topath=#5,#1]{#2}{#3}{#4}{#5}%
  \fi%
}{%
  \end{mhviewnl}%
}%
       ');
DefConstructor('\gincludeview[]{}','');

# =======================================================
# 2. Terminological Relations:                          #
# =======================================================

DefConstructor('\hypernym [] {}{}',"");
DefConstructor('\hyponym [] {}{}',"");
DefConstructor('\meronym [] {}{}',"");
DefConstructor('\MSC{}',"");

# =======================================================
# 3. Authoring states, etc:                             #
# =======================================================


DefKeyVal('modnl','state','Semiverbatim');
DefConstructor('\shadow{}{}','');
DefConstructor('\MathHubPath{}','');
1;

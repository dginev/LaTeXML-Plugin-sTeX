# -*- mode: Perl -*-
# /=====================================================================\ #

# | sTeX implementation for LaTeXML (omtext.sty)                        | #
# | http://github.com/KWARC/LaTeXML-Plugin-sTeX/                        | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2015.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <m.kohlhase@jacobs-university.de>          #_#     | #
# | http://github.com/KWARC/sTeX                               (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;

# =======================================================
# 0. Options handling:                                  #
# =======================================================
DeclareOption('mh', sub { AssignValue ('@omtext' => 1,'global');
PassOptions('modules','sty',ToString(Digest(T_CS('\CurrentOption')))); });
DeclareOption('noindex','');
DeclareOption(undef,sub {PassOptions('modules','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();

# =======================================================
# 1. Requirements:                                      #
# =======================================================
if(LookupValue('@omtext')) {RequirePackage('omtext-mh');}
RequirePackage('xspace');
RequirePackage('modules');
RequirePackage('lxRDFa');
RequirePackage('latexsym');

# =======================================================
# 2. Mathematical Text:                                 #
# =======================================================
Tag('omdoc:metadata',afterOpen=>\&numberIt,afterClose=>\&locateIt,autoClose=>1,autoOpen=>1);
Tag('omdoc:CMP', afterOpen => sub {AssignValue('_LastSeenCMP', $_[1], 'global');return;});
DefParameterType('IfBeginFollows', sub {
   my ($gullet) = @_;
   $gullet->skipSpaces;
                   my $next = $gullet->readToken;
                   $gullet->unread($next);
                   $next = ToString($next);
                   #Hm, falling back to regexp handling, the $gullet->ifNext approach didn't work properly
                   return 1 unless ($next=~/^\\begin/);
                   return;
                 },
 reversion=>'', optional=>1);
DefKeyVal('omtext','functions','CommaList');
DefKeyVal('omtext','display','Semiverbatim');
DefKeyVal('omtext','for','Semiverbatim');
DefKeyVal('omtext','from','Semiverbatim');
DefKeyVal('omtext','type','Semiverbatim');
DefKeyVal('omtext','title','Plain'); #Math mode in titles.
DefKeyVal('omtext','start','Plain'); #Math mode in start phrases
DefKeyVal('omtext','theory','Semiverbatim');
DefKeyVal('omtext','continues','Semiverbatim');
DefKeyVal('omtext','verbalizes','Semiverbatim');

# =======================================================
# 2. Core omtext:                                       #
# =======================================================
DefEnvironment('{omtext} OptionalKeyVals:omtext',
  "<omdoc:omtext "
     . "?&GetKeyVal(#1,'id')(xml:id='&GetKeyVal(#1,'id')')() "
     . "?&GetKeyVal(#1,'type')(type='&GetKeyVal(#1,'type')')() "
     . "?&GetKeyVal(#1,'for')(for='&GetKeyVal(#1,'for')')() "
             . "?&GetKeyVal(#1,'from')(from='&GetKeyVal(#1,'from')')()>"
  . "?&GetKeyVal(#1,'title')(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
  .     "?&GetKeyVal(#1,'start')(<ltx:text class='startemph'>&GetKeyVal(#1,'start')</ltx:text>)()"
                  .     "#body"
                 ."</omdoc:omtext>",  afterDigestBegin=>\&declareFunctions,);

# =======================================================
# 3. Phrase-Level Markup:                               #
# =======================================================
DefKeyVal('phrase','id','Semiverbatim');
DefKeyVal('phrase','style','Semiverbatim');
DefKeyVal('phrase','class','Semiverbatim');
DefKeyVal('phrase','index','Semiverbatim');
DefKeyVal('phrase','verbalizes','Semiverbatim');
DefKeyVal('phrase','type','Semiverbatim');
DefKeyVal('phrase','only','Semiverbatim');
DefConstructor('\phrase OptionalKeyVals:phrase {}',
       "<ltx:text %&GetKeyVals(#1) ?&GetKeyVal(#1,'only')(rel='beamer:only' content='&GetKeyVal(#1,'only')')()>#2</ltx:text>");
DefConstructor('\textsubscript{}', "<ltx:sub>#1</ltx:sub>",mode => 'text');
DefConstructor('\corefs{}{}',
  "<ltx:text class='coref-source' stex:index='#2'>#1</ltx:text>");
DefConstructor('\coreft{}{}',
  "<ltx:text class='coref-target' stex:index='#2'>#1</ltx:text>");
DefConstructor('\nlex{}',"<ltx:text class='nlex'>#1</ltx:text>");
DefConstructor('\nlcex{}',"<ltx:text class='nlcex'>#1</ltx:text>");
DefConstructor('\sinlinequote [] {}',
              "<ltx:quote type='inlinequote'>"
               . "?#1(<dc:source>#1</dc:source>\n)()"
               . "#2"
            . "</ltx:quote>");

# =======================================================
# 3. Block-Level Markup:                                #
# =======================================================
DefEnvironment('{sblockquote} []',
  "<ltx:quote>?#1(<ltx:note role='source'>#1</ltx:note>)()#body</ltx:quote>");
DefEnvironment('{sboxquote} []',
  "<ltx:quote class='boxed'>?#1(<ltx:note role='source'>#1</ltx:note>)()#body</ltx:quote>");
DefConstructor('\lec{}',
   "\n<omdoc:note type='line-end-comment'>#1</omdoc:note>");
RawTeX('
\newcommand\mygraphics[2][]{\includegraphics[#1]{#2}}
\newcommand\mycgraphics[2][]{\begin{center}\mygraphics[#1]{#2}\end{center}}
\newcommand\mybgraphics[2][]{\fbox{\mygraphics[#1]{#2}}}
\newcommand\mycbgraphics[2][]{\begin{center}\fbox{\mygraphics[#1]{#2}}\end{center}}
');

# =======================================================
# 4. Index Markup:                                      #
# =======================================================
DefConstructor('\indexalt[]{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\indextoo[]{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\twinalt[]{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\twintoo[]{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2 #3</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\atwinalt[]{}{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .    "<omdoc:idp>#4</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\atwintoo[]{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2 #3</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .    "<omdoc:idp>#4</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
Tag('omdoc:CMP', autoClose=>1, autoOpen=>1);
Tag('omdoc:omtext', autoClose=>1, autoOpen=>1);
Tag('ltx:p', autoClose=>1, autoOpen=>1);
DefConstructor('\footnote[]{}',
       "<omdoc:note type='foot' ?#1(mark='#1')>#2</omdoc:note>");
DefConstructor('\footnotemark[]',"");
DefConstructor('\footnotetext[]{}',
       "<omdoc:note class='foot' ?#1(mark='#1')>#2</omdoc:note>");
Tag('omdoc:omtext',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:omgroup',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:CMP',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:idx',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ide',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:idt',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:note',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:metadata',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:meta',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:resource',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:recurse',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:imports',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:theory',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ignore',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ref',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:p',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:tabular',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:thead',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:td',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:tr',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:caption',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:Math',afterOpen=>\&numberIt,afterClose=>\&locateIt);
sub numberIt {
  my($document,$node,$whatsit)=@_;
  my(@parents)=$document->findnodes('ancestor::*[@xml:id]',$node);
  my $prefix= (@parents ? $parents[$#parents]->getAttribute('xml:id')."." : '');
  my(@siblings)=$document->findnodes('preceding-sibling::*[@xml:id]',$node);
  my $n = scalar(@siblings)+1;
  my $id = ($node -> getAttribute('xml:id'));
  my $localname = $node->localname;
  $node->setAttribute('xml:id'=>$prefix."$localname$n") unless $id;
  my $about = $node -> getAttribute('about');
  $node->setAttribute('about'=>'#'.$node->getAttribute('xml:id')) unless $about;
  #Also, provide locators:
  my $locator = $whatsit && $whatsit->getProperty('locator');
  #Need to inherit locators if missing:
  $locator = (@parents ? $parents[$#parents]->getAttribute('stex:srcref') : '') unless $locator;
  if ($locator) {
    # There is a BUG with namespace declarations (or am I using the API wrongly??) which
    # does not recognize the stex namespace. Hence, I need to redeclare it...
    my $parent=$document->getNode;
    if(! defined $parent->lookupNamespacePrefix("http://kwarc.info/ns/sTeX"))
      { # namespace not already declared?
        $document->getDocument->documentElement->setNamespace("http://kwarc.info/ns/sTeX","stex",0);
      }
    $node->setAttribute('stex:srcref'=>$locator);
  }return;}

sub locateIt {
  my($document,$node,$whatsit)=@_;
  #Estimate trailer and locator:
  my $locator = $node->getAttribute('stex:srcref');
  return unless $locator; # Nothing to do here...
  my $trailer = $whatsit && $whatsit->getProperty('trailer');
  $trailer = $trailer->getLocator if $trailer;
  $trailer = $locator unless $trailer; # bootstrap
  # TODO: Both should be local, or both remote, any mixture or undefinedness will produce garbage
  my $file_path = LookupValue('SOURCEFILE');
  my $baselocal = LookupValue('BASELOCAL');
  # Hmm, we only care about relative paths, so let's just do a URL->pathname map
  $file_path=~s/^\w+\:\/// if $file_path;
  $baselocal=~s/^\w+\:\/// if $baselocal;
  if ($file_path && $baselocal && ($locator =~ s/^([^\#]+)\#/\#/)) {
    my $relative_path = pathname_relative($file_path,$baselocal);
    $locator = $relative_path.$locator;
  }
  if ($locator =~ /^(.+from=\d+;\d+)/) {
    my $from = $1;
    if ($trailer =~ /(,to=\d+;\d+.+)$/) {
      my $to = $1;
      $locator = $from.$to;
    } else { Error("stex","locator",undef, "Trailer is garbled, expect nonsense in stex:srcref ..."); }
  } else { Error("stex","locator",undef, "Locator \"$locator\" is garbled, expect nonsense in stex:srcref ..."); }
  my $parent = $document->getNode;
  if(! defined $parent->lookupNamespacePrefix("http://kwarc.info/ns/sTeX"))
    { # namespace not already declared?
      $document->getDocument->documentElement->setNamespace("http://kwarc.info/ns/sTeX","stex",0);
    }
  $node->setAttribute('stex:srcref' => $locator);
  return;
}

# =======================================================
# 5. Miscellaneous:                                     #
# =======================================================
DefMacro('\hateq','\@hateq\xspace');
DefConstructor('\@hateq',"\x{2259}");
DefMacro('\hatequiv','\@hatequiv\xspace');
DefConstructor('\@hatequiv',"\x{2A6F}");
DefMacro('\ergo','\@ergo\xspace');
DefConstructor('\@ergo',"\x{219D}");
DefMacro('\ogre','\@ogre\xspace');
DefConstructor('\@ogre',"\x{2B3F}");

# experimental: Declarations 
DefConstructor('\vdec [] {}',
     "<omdoc:declaration ?#1(for='#1')()>#2</omdoc:declaration>");
DefConstructor('\vcond []{}',
	       "<omdoc:identifiers ?#1(for='#1')()>#2</omdoc:identifiers>");
DefConstructor('\vrest [] {}',
	       "<omdoc:restriction ?#1(for='#1')()>#2</omdoc:restriction>");
DefConstructor('\strucdec [] {}',
   "<omdoc:declaration role='structure' name='#1'>#2</omdoc:declaration>");  
DefConstructor('\impdec {}',
   "<omdoc:declaration role='imports'>#1</omdoc:declaration>");  
1;
